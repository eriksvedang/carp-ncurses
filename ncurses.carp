(system-include "ncurses.h")
(relative-include "ncurses_helper.h")
(add-lib "-lncurses")

(register-type WINDOW)
(register-type SCREEN)
(register-type Chtype)
;; Just a synonym for chtype under the hood.
(register-type Attribute)
(register-type Short)

(defmodule NCurses
  (register ERR Int "ERR")
  (register OK Int "OK")
  (register TRUE Int "TRUE")
  (register FALSE Int "FALSE")

  ;; Initialization functions (see curs_initscr)
  (register initscr (Fn [] (Ptr WINDOW)) "initscr")
  (register isendwin (Fn [] Bool) "isendwin")
  (register newterm (Fn [String (Ptr FILE) (Ptr FILE)] (Ptr SCREEN)) "newterm")
  (register set-term (Fn [(Ptr SCREEN)] (Ptr SCREEN)) "set_term")
  (register delscreen (Fn [(Ptr SCREEN)] ()) "delscreen")
  (register endwin (Fn [] Int) "endwin")

  (register printw (Fn [String] ()) "printw") ;; memory leak, switch to (Ptr Char)
  (register move (Fn [Int Int] ()) "move")

  ;; Add character functions (see curs_addch)
  ;; Each of these functions returns an Int indicating success or failure.
  (register addch (Fn [Chtype] Int) "addch")
  (register waddch (Fn [(Ptr WINDOW) Chtype] Int) "waddch")
  (register mvaddch (Fn [Int Int Chtype] Int) "mvaddch")
  (register mvwaddch (Fn [(Ptr WINDOW) Int Int Chtype] Int) "mvwaddch")
  (register echochar (Fn [Chtype] Int) "echochar")
  (register wechochar (Fn [(Ptr WINDOW) Chtype] Int) "wechochar")

  ;; Add string functions (see curs_addstr)
  ;; Each of these functions returns an Int indicating success or failure.
  (register addstr (Fn [String] Int) "addstr")
  (register addnstr (Fn [String Int] Int) "addnstr")
  (register waddstr (Fn [(Ptr WINDOW) String] Int) "waddstr")
  (register waddnstr (Fn [(Ptr WINDOW) String Int] Int) "waddnstr")
  (register mvaddstr (Fn [Int Int String] Int) "mvaddstr")
  (register mvaddnstr (Fn [Int Int String Int] Int) "mvaddnstr")
  (register mvwaddstr (Fn [(Ptr WINDOW) Int Int String] Int) "mvwaddstr")
  (register mvwaddnstr (Fn [(Ptr WINDOW) Int Int String Int] Int)
  "mvwaddnstr")

  ;; Get character functions
  (register getch (Fn [] Int) "getch")
  (register wgetch (Fn [(Ptr WINDOW)] Int) "wgetch")
  (register mvgetch (Fn [Int Int] Int) "mvgetch")
  (register mvwgetch (Fn [(Ptr WINDOW) Int Int] Int) "mvwgetch")
  (register ungetch (Fn [Int] Int) "ungetch")
  (register has-key (Fn [Int] Int) "has_key")

  ;; Refresh functions
  (register refresh (Fn [] Int) "refresh")
  (register wrefresh (Fn [(Ptr WINDOW)] Int) "wrefresh")
  (register wnoutrefresh (Fn [(Ptr WINDOW)] Int) "wnoutrefresh")
  (register doupdate (Fn [] Int) "doupdate")
  (register redrawwin (Fn [(Ptr WINDOW)] Int) "redrawwin")
  (register wredrawln (Fn [(Ptr WINDOW) Int Int] Int) "wredrawln")

  ;; From ncurses_helper.h
  (register width (Fn [] Int))
  (register height (Fn [] Int))

  ;; Color functions (see curs_color)
  ;; COLORS is initialized to the maximum number of colors the terminal can
  ;; support after a call to start-color
  (register COLORS Int "COLORS")
  ;; COLOR_PAIRS is initialized to the maximum number of color pairs the
  ;; terminal can support after a call to start-color
  (register COLOR_PAIRS Int "COLOR_PAIRS")
  (register start-color (Fn [] Int) "start_color")
  (register has-colors (Fn [] Bool) "has_colors")
  (register can-change-color (Fn [] Bool) "can_change_color")
  (register init-pair (Fn [Short Short Short] Int) "init_pair")
  (register init-color (Fn [Short Short Short Short] Int) "init_color")
  ;; extensions -- note that these actually accept ints instead of shorts
  (register init-extended-pair (Fn [Int Int Int] int) "init_extended_pair")
  (register init-extended-color (Fn [Int Int Int Int] int) "init_extended_color")
  (register color-content (Fn [Short Short Short Short] Int) "color_content")
  (register pair-content (Fn [Short Short Short] Int) "pair_content")
  ;; extensions -- note that these actually accept ints instead of shorts
  (register extended-color-content (Fn [Int Int Int Int] Int)
  "extended_color_content")
  (register extended-pair-content (Fn [Int Int Int] Int) "extended_pair_content")
  ;; extension
  (register reset-color-pairs (Fn [] ()) "reset_color_pairs")
  (register color-pair (Fn [Int] Int) "COLOR_PAIR")
  (register pair-number (Fn [Int] Int) "PAIR_NUMBER")
  (register attron (Fn [Int] ()) "attron")
  (register COLOR_BLACK Int "COLOR_BLACK")
  (register COLOR_RED Int "COLOR_RED")
  (register COLOR_RED Int "COLOR_RED")
  (register COLOR_GREEN Int "COLOR_GREEN")
  (register COLOR_YELLOW Int "COLOR_YELLOW")
  (register COLOR_BLUE Int "COLOR_BLUE")
  (register COLOR_MAGENTA Int "COLOR_MAGENTA")
  (register COLOR_CYAN Int "COLOR_CYAN")
  (register COLOR_WHITE Int "COLOR_WHITE")

  ;; Attr functions
  ;; N.B. Many of the curs_attr functions take a void pointer as their final
  ;; argument. The man pages I have, circa ncurses 6.1, state that only
  ;; "functions that modify the color" and "functions that retrieve the color"
  ;; use this final argument, and when used, expect an int pointer.
  ;;
  ;; All other functions don't make use of the argument at all, "except to check
  ;; that it is null"
  ;;
  ;; So, as a result, the signatures of bindings for functions that take the
  ;; final void pointer as an argument take a `(Ptr Int)` since we can pass NULL
  ;; for the functions that don't use the argument, and an Int Pointer for those
  ;; that do.
  (register attr-ptr (Fn [] (Ptr Attribute)) "NCurses_attr_ptr")
  (register attr-get (Fn [(Ptr Attribute) (Ptr Short) (Ptr Int)] Int) "attr_get")
  (register wattr-get (Fn [(Ptr WINDOW) (Ptr Attribute) (Ptr Short) (Ptr Int)] Int) "wattr_get")
  (register attr-set (Fn [(Ptr Attribute) Short (Ptr Int)] Int) "attr_set")
  (register wattr-set (Fn [(Ptr WINDOW) (Ptr Attribute) Short (Ptr Int)] Int) "wattr_set")
  (register attr-off (Fn [Attribute (Ptr Int)] Int) "attr_off")
  (register wattr-off (Fn [(Ptr WINDOW) Attribute (Ptr Int)] Int) "wattr_off")
  (register attr-on (Fn [Attribute (Ptr Int)] Int) "attr_on")
  (register wattr-on (Fn [(Ptr WINDOW) Attribute (Ptr Int)] Int) "wattr_on")
  (register attroff (Fn [Int] Int) "attroff")
  (register wattroff (Fn [(Ptr WINDOW) Int] Int) "wattroff")
  (register attron (Fn [Int] Int) "attron")
  (register wattron (Fn [(Ptr WINDOW) Int] Int) "wattron")
  (register attrset (Fn [Int] Int) "attrset")
  (register wattrset (Fn [(Ptr WINDOW) Int] Int) "wattrset")
  (register chgat (Fn [Int Attribute Short (Ptr Int)] Int) "chgat")
  (register wchgat (Fn [(Ptr WINDOW) Int Attribute Short (Ptr Int)] Int) "wchgat")
  (register mvchgat (Fn [Int Int Int Attribute Short (Ptr Int)] Int) "mvchgat")
  (register mvwchgat (Fn [(Ptr WINDOW) Int Int Int Attribute Short (Ptr Int)] Int) "mvwchgat")
  (register color-set (Fn [Short (Ptr Int)] Int) "color_set")
  (register wcolor-set (Fn [(Ptr WINDOW) Short (Ptr Int)] Int) "wcolor_set")
  (register standend (Fn [] Int) "standend")
  (register wstandend (Fn [(Ptr WINDOW)] Int) "wstandend")
  (register standout (Fn [] Int) "standout")
  (register wstandout (Fn [(Ptr WINDOW)] Int) "wstandout")

  ;; Windows
  (register wbkgd (Fn [(Ptr WINDOW) Int] ()) "wbkgd")
  (register newwin (Fn [Int Int Int Int] (Ptr WINDOW)) "newwin")
  (register wattron (Fn [(Ptr WINDOW) Int] ()) "wattron")
  (register wrefresh (Fn [(Ptr WINDOW)] ()) "wrefresh")
  (register box (Fn [(Ptr WINDOW) Int Int] ()) "box")
  (register mvwprintw (Fn [(Ptr WINDOW) Int Int String] ()) "mvwprintw") ;; Leak!
  )
